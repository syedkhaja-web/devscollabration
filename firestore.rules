/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user data and project ownership,
 * and public read access with owner-only writes for blog posts. It is designed for the
 * Devs Tec Collab platform, focusing on projects, documentation, and blog posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can access their own data.
 * - /projects/{projectId}: Stores project information. Only the project owner can modify.
 * - /projects/{projectId}/documentation/{documentationId}: Stores documentation for projects. Only the project owner can modify.
 * - /blog_posts/{blogPostId}: Stores blog posts. Publicly readable, but only the author can modify.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents.
 * - Project creation, modification, and deletion are restricted to the project owner.
 * - Documentation creation, modification, and deletion are restricted to the project owner.
 * - Blog posts are publicly readable, but creation, modification, and deletion are restricted to the author.
 * - Listing of user documents is denied.
 *
 * Denormalization for Authorization:
 * - Projects and blog posts include 'ownerId' and 'authorId' fields, respectively, to simplify authorization checks.
 * - Documentation includes 'projectId' to allow authorization checks based on project ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can access their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if request.auth.uid == userId
     * @deny (get, create, update, delete, list): if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can read or write their own user document.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the project owner can create, update, or delete projects.
     * @path /projects/{projectId}
     * @allow (create): if request.auth.uid == request.resource.data.ownerId
     * @allow (get, list): if true;
     * @allow (update, delete): if request.auth.uid == resource.data.ownerId
     * @deny (create): if request.auth.uid != request.resource.data.ownerId
     * @deny (update, delete): if request.auth.uid != resource.data.ownerId
     * @principle Enforces document ownership for writes and public read for all operations.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Enforces that only the project owner can create, update, or delete documentation.
     * @path /projects/{projectId}/documentation/{documentationId}
     * @allow (create): if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid
     * @allow (get, list): if true;
     * @allow (update, delete): if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid
     * @deny (create): if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId != request.auth.uid
     * @deny (update, delete): if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId != request.auth.uid
     * @principle Enforces document ownership for writes and public read for all operations.
     */
    match /projects/{projectId}/documentation/{documentationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingProjectOwner(projectId);
      allow delete: if isSignedIn() && isExistingProjectOwner(projectId);
    }

    /**
     * @description Allows public read access to blog posts, but restricts creation, updates, and deletion to the author.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.authorId
     * @allow (update, delete): if request.auth.uid == resource.data.authorId
     * @deny (create): if request.auth.uid != request.resource.data.authorId
     * @deny (update, delete): if request.auth.uid != resource.data.authorId
     * @principle Allows public read access, but enforces document ownership for writes.
     */
    match /blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    function isExistingProjectOwner(projectId) {
      return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid && resource != null;
    }
  }
}