/**
 * @fileoverview Firestore Security Rules for Devs Tec Collab platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model combined with public read access for specific collections like blog posts.
 * User data is protected via path-based rules, while shared resources (projects) rely on explicit ownership fields.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /projects/{projectId}: Stores project data, with ownerId indicating the project creator.
 * - /projects/{projectId}/documentation/{documentationId}: Stores documentation related to projects. Access is controlled by the project owner.
 * - /blog_posts/{blogPostId}: Stores blog posts. Publicly readable, but create/update/delete are restricted to the author.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The blog_posts collection allows public reads but restricts writes to the author.
 *
 * Denormalization for Authorization:
 * - Documentation documents are created as subcollections of projects, inheriting authorization from the project. The `projectId` field within a Documentation document facilitates checking project ownership without requiring additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId creates their profile.
     * @allow (get, update, delete) Authenticated user with matching userId accesses their profile.
     * @deny (create) Authenticated user tries to create a profile with a mismatched userId.
     * @deny (get, update, delete) Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for all operations.  Validates userId on create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for projects.
     * @path /projects/{projectId}
     * @allow (create) Authenticated user creates a project with their userId as ownerId.
     * @allow (get, list, update, delete) Authenticated user who is the owner accesses the project.
     * @deny (create) Authenticated user creates a project with a mismatched ownerId.
     * @deny (get, list, update, delete) Authenticated user tries to access a project they don't own.
     * @principle Enforces document ownership for writes. Allows listing for project owners.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for documentation subcollection.
     * @path /projects/{projectId}/documentation/{documentationId}
     * @allow (create) Authenticated user who owns the project creates documentation.
     * @allow (get, list, update, delete) Authenticated user who owns the project accesses the documentation.
     * @deny (create) Authenticated user tries to create documentation for a project they don't own.
     * @deny (get, list, update, delete) Authenticated user tries to access documentation for a project they don't own.
     * @principle Enforces document ownership (via parent project) for all operations.
     */
    match /projects/{projectId}/documentation/{documentationId} {
      allow get, list: if true;
      allow create: if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid && resource != null;
      allow delete: if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for blog posts.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list) Anyone can read blog posts.
     * @allow (create) Authenticated user creates a blog post with their userId as authorId.
     * @allow (update, delete) Authenticated user who is the author updates or deletes the blog post.
     * @deny (create) Authenticated user creates a blog post with a mismatched authorId.
     * @deny (update, delete) Authenticated user tries to access a blog post they don't own.
     * @principle Public read access with owner-only writes.
     */
    match /blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}