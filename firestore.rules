/**
 * @fileoverview Firestore Security Rules for Devs Tec Collab platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model:
 *   - User data is strictly private and accessible only to the owning user.
 *   - Projects and BlogPosts are publicly readable but writable only by their owners.
 *   - Documentation follows the ownership of its parent project.
 *
 * Data Structure:
 * - /users/{userId}:  Stores private user data.  `userId` in path must match `auth.uid`.
 * - /projects/{projectId}: Stores project data, including an `ownerId` field.
 * - /projects/{projectId}/documentation/{documentationId}: Stores project documentation, inherits `projectId`.
 * - /blog_posts/{blogPostId}: Stores blog posts, including an `authorId` field.
 *
 * Key Security Decisions:
 * - Users can only access their own data in the `/users/{userId}` collection.
 * - Listing users is disallowed to prevent data leakage.
 * - Blog posts are publicly readable, but only the author can create, update, or delete them.
 * - Projects are publicly readable, but only the owner can create, update, or delete them.
 * - Documentation inherits the security context of its parent project.
 *
 * Denormalization for Authorization:
 *  - Projects and BlogPosts include `ownerId` and `authorId` fields, respectively, to avoid needing extra reads for authorization.
 *  - Documentation includes `projectId` to link back to the owning project for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the current user is the owner of the resource based on the uid.
     * @param {string} userId - The user ID to check against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to check against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile with matching userId.
     * @allow (get, update, delete) Signed-in user accesses their own profile with matching userId.
     * @deny (create) Signed-in user tries to create a profile with a mismatched userId.
     * @deny (get, update, delete) Signed-in user tries to access another user's profile.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId} {
      // Only the user can read/write their own data.
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for projects.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project data.
     * @allow (create) Signed-in user creates a project with their userId as the ownerId.
     * @allow (update, delete) Only the owner can update or delete a project.
     * @deny (create) Signed-in user creates a project with a mismatched ownerId.
     * @deny (update, delete) Non-owner tries to update or delete a project.
     * @principle Enforces document ownership for writes. Publicly readable, owner-only writable. Validates relational integrity between documents.
     */
    match /projects/{projectId} {
      // Anyone can read projects
      allow get, list: if true;

      // Only the owner can create, update, or delete projects.
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for documentation within projects.
     * @path /projects/{projectId}/documentation/{documentationId}
     * @allow (get, list) Anyone can read documentation.
     * @allow (create) Project owner creates documentation within their project.
     * @allow (update, delete) Only the project owner can update or delete documentation.
     * @deny (create) Non-owner tries to create documentation in a project.
     * @deny (update, delete) Non-owner tries to update or delete documentation.
     * @principle Inherits ownership from the parent project. Validates relational integrity between documents.
     */
    match /projects/{projectId}/documentation/{documentationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid && request.resource.data.projectId == projectId;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for blog posts.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list) Anyone can read blog posts.
     * @allow (create) Signed-in user creates a blog post with their userId as the authorId.
     * @allow (update, delete) Only the author can update or delete a blog post.
     * @deny (create) Non-signed in user tries to create a blog post.
     * @deny (create) Signed-in user creates a blog post with a mismatched authorId.
     * @deny (update, delete) Non-author tries to update or delete a blog post.
     * @principle Enforces document ownership for writes. Publicly readable, owner-only writable. Validates relational integrity between documents.
     */
    match /blog_posts/{blogPostId} {
      // Anyone can read blog posts
      allow get, list: if true;

      // Only the author can create, update, or delete blog posts
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}